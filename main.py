import random

import numpy as np

def f(x):
    return 2/(1 + np.exp(-x)) -1 #гиперболический тангенс

def df(x):
    return 0.5*(1 + x)*(1 - x) #функция для вычисления производной

w1 = np.array([[-0.2, 0.3, -0.4],[0.1, -0.3, -0.4]]) #проинициализированы веса для нейронной сети(первый слой)
w2 = np.array([0.2, 0.3]) #проинициализированы веса для нейронной сети(второй слой)

def go_forward(inp): # функция, кот пропускает вектор наблюдений через нейронную сеть
    sum = np.dot(w1, inp)
    out = np.array([f(x) for x in sum]) #для каждого нейрона скрытого слоя запоминаем выходные значения

    sum = np.dot(w2, out)
    y = f(sum) #запоминаем выходное значение для всей сети
    return(y, out) #возвращаем все запомненные значения в виде кортежа

def train(epoch):
    global w1,w2
    lmd = 0.01 #шаг обучения
    N = 10000 #число итераций при обучении
    count = len(epoch)
    for k in range (N):
        x = epoch[np.random.randint(0, count)] #случайный выбор сигналаиз обучающей выборки
        y, out = go_forward(x[0:3]) #прямой проход по НС и вычисление выходных значений нейронов
        e = y - x[-1] #ошибка
        delta = e * df(y) #локальный градиент
        w2[0] = w2[0] - lmd * delta * out[0] #корректировка веса первой связи
        w2[1] = w2[1] - lmd * delta * out[1] #корректировка веса второй связи

        delta2 = w2 * delta*df(out) #вектор из двух величин локальных градиентов. Вычисляем локальные градиенты для нейронов скрытого слоя

        #корректировка связей первого слоя
        w1[0, :] = w1[0, :] - np.array(x[0:3]) * delta2[0] * lmd
        w1[1, :] = w1[1, :] - np.array(x[0:3]) * delta2[1] * lmd

    #обучающая выборка, первые три параметра - это входной вектор, четвертое - требуемое выходное значение
epoch = [(-1, -1, -1, -1),
             (-1, -1, 1, 1),
             (-1, 1, -1, -1),
             (-1, 1, 1, 1),
             (1, -1, -1, -1),
             (1, -1, 1, 1),
             (1, 1, -1, -1),
             (1, 1, 1, -1)]

train(epoch)   # запуск обучения сети

    # проверка полученных результатов
for x in epoch:
    y, out = go_forward(x[0:3])
    print(f"Выходное значение НС: {y} => {x[-1]}")
